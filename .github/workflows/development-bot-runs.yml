name: Development-Bot-Runs
run-name: Development-Bot-Runs-${{ github.run_number }}
on:
  #workflow_dispatch for manual triggering
  workflow_dispatch: 
  # Schedule 12PM UTC/6AM MT for just kgca-development/development-bot main branch
  schedule:
    - cron: '00 12 * * *'
  # Run on pushes to any branch except main (which gets full deployment)
  push:
    branches-ignore:
      - main
    paths:
      - '.github/workflows/development-bot-runs.yml'

# Need to grant actions token write permissions to push to git repo and deploy to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    name: Build and Deploy RSS Feed
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ github.ref == 'refs/heads/main' && secrets.DEVELOPMENT_BOT_DEPLOY_KEY || '' }}
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
            
      - name: Install dependencies
        run: go mod download
        
      - name: Verify dependencies
        run: go mod verify
          
      - name: Execute Development Bot
        id: bot_execution
        run: |
          echo "::group::Development Bot Execution"
          go run main.go 2>&1 | tee bot_execution_output.txt
          echo "::endgroup::"
          
          # Parse the output for development activity counts
          DP_ACTIONS=0
          RA_ACTIONS=0
          NEW_DPS=0
          UPDATED_DPS=0
          NEW_RAS=0
          UPDATED_RAS=0
          
          # Extract final summary line
          if grep -q "Combined RSS feed processed with" bot_execution_output.txt; then
            SUMMARY_LINE=$(grep "Combined RSS feed processed with" bot_execution_output.txt)
            DP_ACTIONS=$(echo "$SUMMARY_LINE" | grep -o '[0-9]\+ development permit actions' | grep -o '[0-9]\+' || echo "0")
            RA_ACTIONS=$(echo "$SUMMARY_LINE" | grep -o '[0-9]\+ rezoning application actions' | grep -o '[0-9]\+' || echo "0")
          fi
          
          # Count specific actions from detailed output
          NEW_DPS=$(grep -c "Development Permit.*Creating RSS feed entry" bot_execution_output.txt || echo "0")
          UPDATED_DPS=$(grep -c "Development Permit.*Updating RSS feed entry" bot_execution_output.txt || echo "0")
          NEW_RAS=$(grep -c "Rezoning Application.*Creating RSS feed entry" bot_execution_output.txt || echo "0")
          UPDATED_RAS=$(grep -c "Rezoning Application.*Updating RSS feed entry" bot_execution_output.txt || echo "0")
          
          # Set outputs for summary
          echo "dp_actions=$DP_ACTIONS" >> $GITHUB_OUTPUT
          echo "ra_actions=$RA_ACTIONS" >> $GITHUB_OUTPUT
          echo "new_dps=$NEW_DPS" >> $GITHUB_OUTPUT
          echo "updated_dps=$UPDATED_DPS" >> $GITHUB_OUTPUT
          echo "new_ras=$NEW_RAS" >> $GITHUB_OUTPUT
          echo "updated_ras=$UPDATED_RAS" >> $GITHUB_OUTPUT
          
          # Add bot execution results to summary
          echo "## ü§ñ Bot Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_ACTIVITY=$((DP_ACTIONS + RA_ACTIONS))
          if [ $TOTAL_ACTIVITY -gt 0 ]; then
            echo "üéâ **Development Activity Detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Found **$DP_ACTIONS** development permit actions and **$RA_ACTIONS** rezoning application actions." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Activity Breakdown" >> $GITHUB_STEP_SUMMARY
            echo "| Type | New | Updated |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-----|---------|" >> $GITHUB_STEP_SUMMARY
            echo "| üèóÔ∏è Development Permits | $NEW_DPS | $UPDATED_DPS |" >> $GITHUB_STEP_SUMMARY
            echo "| üèõÔ∏è Rezoning Applications | $NEW_RAS | $UPDATED_RAS |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $NEW_DPS -gt 0 ] || [ $UPDATED_DPS -gt 0 ] || [ $NEW_RAS -gt 0 ] || [ $UPDATED_RAS -gt 0 ]; then
              echo "### Summary" >> $GITHUB_STEP_SUMMARY
              if [ $NEW_DPS -gt 0 ]; then
                echo "- ‚ú® $NEW_DPS new development permit(s) added to RSS feed" >> $GITHUB_STEP_SUMMARY
              fi
              if [ $UPDATED_DPS -gt 0 ]; then
                echo "- üîÑ $UPDATED_DPS development permit(s) updated in RSS feed" >> $GITHUB_STEP_SUMMARY
              fi
              if [ $NEW_RAS -gt 0 ]; then
                echo "- ‚ú® $NEW_RAS new rezoning application(s) added to RSS feed" >> $GITHUB_STEP_SUMMARY
              fi
              if [ $UPDATED_RAS -gt 0 ]; then
                echo "- üîÑ $UPDATED_RAS rezoning application(s) updated in RSS feed" >> $GITHUB_STEP_SUMMARY
              fi
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "üò¥ **No New Activity**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No development activity changes detected. The RSS feed remains current." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Commit Data Changes
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/ output/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update development data and RSS feed"
            git push origin main
          fi
          
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v5
        
      - name: Create Pages deployment directory
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p _site
          cp output/killarney-development.xml _site/
          cp README.md _site/
          # Create a simple index.html that redirects to the RSS feed
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Killarney Development RSS Feed</title>
              <meta http-equiv="refresh" content="0; url=killarney-development.xml">
              <link rel="canonical" href="killarney-development.xml">
          </head>
          <body>
              <h1>Killarney Development Activity RSS Feed</h1>
              <p>If you are not redirected automatically, <a href="killarney-development.xml">click here for the RSS feed</a>.</p>
              <p><a href="README.md">View documentation</a></p>
          </body>
          </html>
          EOF
          
      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site
          
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Validate RSS output
        id: rss_validation
        run: |
          if [ ! -f "output/killarney-development.xml" ]; then
            echo "rss_items=0" >> $GITHUB_OUTPUT
            echo "rss_size=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Basic XML validation
          if ! xmllint --noout output/killarney-development.xml; then
            echo "rss_items=0" >> $GITHUB_OUTPUT
            echo "rss_size=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Get RSS feed stats for summary
          if ITEM_COUNT=$(xmllint --xpath 'count(//item)' output/killarney-development.xml 2>/dev/null); then
            echo "rss_items=$ITEM_COUNT" >> $GITHUB_OUTPUT
          else
            echo "rss_items=0" >> $GITHUB_OUTPUT
          fi
          
          if FILE_SIZE=$(stat -c%s output/killarney-development.xml 2>/dev/null); then
            echo "rss_size=$FILE_SIZE" >> $GITHUB_OUTPUT
          else
            echo "rss_size=0" >> $GITHUB_OUTPUT
          fi
        
      - name: Create Execution Summary
        if: always()
        run: |
          echo "# ü§ñ Development Bot Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Activity summary table
          echo "## üìä Development Activity" >> $GITHUB_STEP_SUMMARY
          echo "| Activity Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Total DP Actions | ${{ steps.bot_execution.outputs.dp_actions }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèõÔ∏è Total Rezoning Actions | ${{ steps.bot_execution.outputs.ra_actions }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üÜï New Development Permits | ${{ steps.bot_execution.outputs.new_dps }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Updated Development Permits | ${{ steps.bot_execution.outputs.updated_dps }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üÜï New Rezoning Applications | ${{ steps.bot_execution.outputs.new_ras }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Updated Rezoning Applications | ${{ steps.bot_execution.outputs.updated_ras }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment info
          echo "## üöÄ Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| üì° RSS Feed Generation | ${{ steps.bot_execution.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | Bot execution |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç RSS Feed Validation | ${{ steps.rss_validation.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | ${{ steps.rss_validation.outputs.rss_items }} items, ${{ steps.rss_validation.outputs.rss_size }} bytes |" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "| üìÑ GitHub Pages Deployment | ‚è≠Ô∏è Skipped | Branch build - no deployment |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| üìÑ GitHub Pages Deployment | ${{ steps.deployment.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }} | RSS feed published |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Links (only for main branch builds)
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "## üîó Links" >> $GITHUB_STEP_SUMMARY
            echo "- üì° [RSS Feed](${{ steps.deployment.outputs.page_url }}killarney-development.xml)" >> $GITHUB_STEP_SUMMARY
            echo "- üè† [Documentation](${{ steps.deployment.outputs.page_url }}README.md)" >> $GITHUB_STEP_SUMMARY
            echo "- üåê [GitHub Pages Site](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Detailed output for debugging (if there were issues)
          if [ -f bot_execution_output.txt ] && [ "${{ steps.bot_execution.outcome }}" != "success" ]; then
            echo "## üîç Execution Details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 bot_execution_output.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
