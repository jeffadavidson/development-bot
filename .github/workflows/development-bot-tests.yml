name: Development-Bot-Tests
run-name: Development-Bot-Tests-${{ github.run_number }}
on:
  workflow_dispatch: #allow for manual triggering
  push:
    branches-ignore:
      - main

jobs:
  test:
    name: Go Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.1'
      - name: Install dependencies
        run: |
          go mod download
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
      
      - name: Run tests with JSON output
        id: test_results
        run: |
          # Run tests with verbose output and JSON format
          go test -v -json ./... 2>&1 | tee test_output_json.txt
          go test -v ./... 2>&1 | tee test_output.txt
          
          # Parse results for summary
          TOTAL_TESTS=$(grep '"Action":"run"' test_output_json.txt | wc -l)
          PASSED_TESTS=$(grep '"Action":"pass"' test_output_json.txt | wc -l)
          FAILED_TESTS=$(grep '"Action":"fail"' test_output_json.txt | wc -l)
          SKIPPED_TESTS=$(grep '"Action":"skip"' test_output_json.txt | wc -l)
          
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
          
          # Add test results to summary
          echo "## 🧪 Test Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ $FAILED_TESTS -gt 0 ]; then
            echo "❌ **$FAILED_TESTS test(s) failed out of $TOTAL_TESTS total tests**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Test | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|------|--------|" >> $GITHUB_STEP_SUMMARY
            grep '"Action":"fail"' test_output_json.txt | while read line; do
              TEST_NAME=$(echo "$line" | jq -r '.Test // "Unknown"')
              PACKAGE=$(echo "$line" | jq -r '.Package // "Unknown"')
              echo "| $PACKAGE | $TEST_NAME | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "✅ **All $PASSED_TESTS tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
      
      - name: Run go vet
        id: vet_check
        run: |
          echo "## 🔍 Static Analysis (go vet)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if ! go vet ./... 2>&1 | tee vet_output.txt; then
            echo "❌ **Static analysis found issues**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Issues Found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat vet_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **No static analysis issues found**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Check go fmt
        id: fmt_check
        run: |
          echo "## 🎨 Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          UNFORMATTED=$(gofmt -s -l . | wc -l)
          if [ "$UNFORMATTED" -gt 0 ]; then
            echo "❌ **$UNFORMATTED file(s) need formatting**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Files that need formatting:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            gofmt -s -l . >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All files are properly formatted**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Execute Development Bot
        id: bot_execution
        run: |
          echo "## 🤖 Development Bot Execution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "::group::Development Bot Execution"
          if go run main.go 2>&1 | tee bot_output.txt; then
            echo "::endgroup::"
            echo "✅ **Development bot ran successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Execution Output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -20 bot_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "::endgroup::"
            echo "❌ **Development bot execution failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Error Output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -50 bot_output.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
      
      - name: Validate RSS output
        id: rss_validation
        run: |
          echo "## 📡 RSS Feed Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ ! -f "output/killarney-development.xml" ]; then
            echo "❌ **RSS feed was not generated**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Basic XML validation
          if ! xmllint --noout output/killarney-development.xml 2>validation_errors.txt; then
            echo "❌ **Generated RSS feed is not valid XML**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Validation Errors" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat validation_errors.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Get RSS feed stats
          ITEM_COUNT=$(xmllint --xpath 'count(//item)' output/killarney-development.xml 2>/dev/null)
          FILE_SIZE=$(stat -c%s output/killarney-development.xml)
          
          echo "✅ **Generated valid RSS feed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### RSS Feed Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📰 Items | $ITEM_COUNT |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 File Size | $FILE_SIZE bytes |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Create Final Summary
        if: always()
        run: |
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          OVERALL_STATUS="✅ Success"
          if [ "${{ steps.test_results.outputs.failed_tests }}" -gt 0 ] || \
             [ "${{ steps.vet_check.outcome }}" != "success" ] || \
             [ "${{ steps.fmt_check.outcome }}" != "success" ] || \
             [ "${{ steps.bot_execution.outcome }}" != "success" ] || \
             [ "${{ steps.rss_validation.outcome }}" != "success" ]; then
            OVERALL_STATUS="❌ Failed"
          fi
          
          echo "**Overall Status:** $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Summary table
          echo "## Quick Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ steps.test_results.outputs.failed_tests == '0' && '✅ Passed' || '❌ Failed' }} | ${{ steps.test_results.outputs.passed_tests }}/${{ steps.test_results.outputs.total_tests }} tests passed |" >> $GITHUB_STEP_SUMMARY
          echo "| 🎨 Formatting | ${{ steps.fmt_check.outcome == 'success' && '✅ Passed' || '❌ Failed' }} | Code formatting check |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Static Analysis | ${{ steps.vet_check.outcome == 'success' && '✅ Passed' || '❌ Failed' }} | Go vet analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| 🤖 Bot Execution | ${{ steps.bot_execution.outcome == 'success' && '✅ Passed' || '❌ Failed' }} | Development bot run |" >> $GITHUB_STEP_SUMMARY
          echo "| 📡 RSS Validation | ${{ steps.rss_validation.outcome == 'success' && '✅ Passed' || '❌ Failed' }} | RSS feed generation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "*Detailed results are shown in the sections above.*" >> $GITHUB_STEP_SUMMARY
